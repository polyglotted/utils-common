apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'maven-publish'

group = 'io.polyglotted'
version = project.projVersion
sourceCompatibility = 1.8
targetCompatibility = 1.8

idea {
    module {
        inheritOutputDirs = false
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

ext {
    bcprovVersion = '1.60'
    commonsCodecVersion = '1.11'
    configVersion = '1.3.3'
    failureAccessVersion = '1.0.1'
    findbugsVersion = '3.0.2'
    guavaVersion = '27.0.1-jre'
    hamcrestVersion = '1.3'
    httpCoreVersion = '4.4.10'
    httpClientVersion = '4.5.6'
    httpClientAsyncVersion = '4.1.4'
    injectVersion = '1'
    jacksonVersion = '2.9.8'
    jasyptVersion = '1.9.2'
    jodaVersion = '2.10.1'
    jschVersion = '0.1.55'
    junitVersion = '4.12'
    junitParamsVersion = '1.1.1'
    log4jVersion = '2.11.1'
    lombokVersion = '1.18.2'
    slf4jVersion = '1.7.25'
    snakeyamlVersion = '1.19' //lock-down-spring
    stax2Version = '4.1'
    woodstoxVersion = '5.2.0'
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"

    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile("org.slf4j:jcl-over-slf4j:${slf4jVersion}") {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    compile("org.slf4j:jul-to-slf4j:${slf4jVersion}") {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    compile "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    compile("org.apache.logging.log4j:log4j-core:${log4jVersion}") {
        exclude group: "org.apache.logging.log4j", module: "log4j-api"
    }
    compile("org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}") {
        exclude group: "org.slf4j", module: "slf4j-api"
        exclude group: "org.apache.logging.log4j", module: "log4j-api"
        exclude group: "org.apache.logging.log4j", module: "log4j-core"
    }
    compile "commons-codec:commons-codec:${commonsCodecVersion}"
    compile "joda-time:joda-time:${jodaVersion}"
    compile "javax.inject:javax.inject:${injectVersion}"
    compile "org.jasypt:jasypt:${jasyptVersion}"
    compile "com.typesafe:config:${configVersion}"
    compile "com.google.code.findbugs:jsr305:${findbugsVersion}"
    compile "com.google.guava:failureaccess:${failureAccessVersion}"
    compile "com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava"
    compile("com.google.guava:guava:${guavaVersion}") {
        exclude group: "com.google.code.findbugs", module: "jsr305"
        exclude group: "org.checkerframework", module: "checker-qual"
        exclude group: "com.google.errorprone", module: "error_prone_annotations"
        exclude group: "com.google.j2objc", module: "j2objc-annotations"
        exclude group: "org.codehaus.mojo", module: "animal-sniffer-annotations"
        exclude group: "com.google.guava", module: "failureaccess"
        exclude group: "com.google.guava", module: "listenablefuture"
    }
    compile "com.jcraft:jsch:${jschVersion}"
    compile "org.bouncycastle:bcprov-jdk15on:${bcprovVersion}"
    compile "org.yaml:snakeyaml:${snakeyamlVersion}"
    compile "org.codehaus.woodstox:stax2-api:${stax2Version}"
    compile("com.fasterxml.woodstox:woodstox-core:${woodstoxVersion}") {
        exclude group: "org.codehaus.woodstox", module: "stax2-api"
    }
    compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    compile("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}") {
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
    }
    compile("com.fasterxml.jackson.module:jackson-module-parameter-names:${jacksonVersion}") {
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
    }
    compile("com.fasterxml.jackson.datatype:jackson-datatype-guava:${jacksonVersion}") {
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
        exclude group: "com.google.guava", module: "guava"
    }
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}") {
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
    }
    compile("com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${jacksonVersion}") {
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
    }
    compile("com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jacksonVersion}") {
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
    }
    compile("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}") {
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
        exclude group: "org.yaml", module: "snakeyaml"
    }
    compile"org.apache.httpcomponents:httpcore:${httpCoreVersion}"
    compile("org.apache.httpcomponents:httpcore-nio:${httpCoreVersion}") {
        exclude group: "org.apache.httpcomponents", module: "httpcore"
    }
    compile("org.apache.httpcomponents:httpclient:${httpClientVersion}") {
        exclude group: "commons-logging", module: "commons-logging"
        exclude group: "commons-codec", module: "commons-codec"
        exclude group: "org.apache.httpcomponents", module: "httpcore"
    }
    compile("org.apache.httpcomponents:httpmime:${httpClientVersion}") {
        exclude group: "commons-logging", module: "commons-logging"
        exclude group: "org.apache.httpcomponents", module: "httpclient"
    }
    compile("org.apache.httpcomponents:httpasyncclient:${httpClientAsyncVersion}") {
        exclude group: "commons-logging", module: "commons-logging"
        exclude group: "org.apache.httpcomponents", module: "httpcore"
        exclude group: "org.apache.httpcomponents", module: "httpcore-nio"
        exclude group: "org.apache.httpcomponents", module: "httpclient"
    }

    testCompile("org.apache.logging.log4j:log4j-jcl:${log4jVersion}") {
        exclude group: "org.apache.logging.log4j", module: "log4j-api"
    }
    testCompile "org.hamcrest:hamcrest-all:${hamcrestVersion}"
    testCompile("junit:junit:${junitVersion}") {
        exclude group: "org.hamcrest", module: "hamcrest-core"
    }
    testCompile("pl.pragmatists:JUnitParams:${junitParamsVersion}") {
        exclude group: "junit", module: "junit"
    }
}
sourceSets {
    test.compileClasspath += configurations.compileOnly
    test.runtimeClasspath += configurations.compileOnly
}

test {
    systemProperty "slack.hook.url", project.getProperty("slack.hook.url")
}
jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}
check.dependsOn jacocoTestReport

task buildZip(type: Zip) {
    into('java/lib') {
        from jar
        from configurations.compileClasspath
    }
}
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
signing {
    sign configurations.archives
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'utils-common'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'utils-common'
                description = 'Polyglotted Common Utils'
                url = 'https://github.com/polyglotted/utils-common'
                scm {
                    connection = 'scm:git:git@github.com:polyglotted/utils-common.git'
                    developerConnection = 'scm:git:git@github.com:polyglotted/utils-common.git'
                    url = 'https://github.com/polyglotted/utils-common'
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'vshank77'
                        name = 'Shankar Vasduevan'
                        email = 'shankar [at] polyglotted [dot] io'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username = "${ossrhUsername}"
                password = "${ossrhPassword}"
            }
            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}